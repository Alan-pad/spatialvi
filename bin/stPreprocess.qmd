---
title: "Pre-processing and filtering of Spatial Transcriptomics data"
format:
  html:
    code-fold: true
jupyter: python3
---

```{python}
#| tags: [parameters]
#| echo: false

fileNameST = None
resolution = 1
saveFileST = None

rawAdata = None #Name of the h5ad file
mitoFile = None #Path and name of the mito file
pltFigSize = 6 #Figure size
minCounts = 500 #Min counts per spot
minGenes = 250 #Min genes per spot
minCells = 1 #Min cells per gene
histplotQCmaxTotalCounts = 10000 #Max total counts
histplotQCminGeneCounts = 4000 #Min gene counts
histplotQCbins = 40 #Number of bins
nameDataPlain = "st_adata_plain.h5ad" #Name of the raw data save file
nameDataNorm = "st_adata_norm.h5ad" #Name of the normalized data save file
```

```{python}
#| echo: false
# Hide warnings in output html.
import scanpy as sc
import warnings
warnings.filterwarnings("ignore")
sc.settings.verbosity = 0
```

```{python}
#| echo: false
# Hide warnings in output html.

# Load packages
import scanpy as sc
import numpy as np
import pandas as pd
import scipy.stats
from matplotlib import pyplot as plt
from scipy.sparse import csr_matrix

st_adata = sc.read(rawAdata)
print(st_adata.shape)

#st_adata.obs["norm_factors"] = pd.Series(index=st_adata.obs[st_adata.obs["in_tissue"] == 1].index, data=f_temp).reindex(
#    st_adata.obs.index
#)

mito = pd.read_csv(mitoFile, index_col=["Symbol", "MCARTA2_LIST"], delimiter="\t")["EnsemblGeneID"]
mito = mito.xs(1, level="MCARTA2_LIST").sort_index().reset_index()
print(mito)

st_adata.var["mt"] = st_adata.var_names.isin(mito["Symbol"])
sc.pp.calculate_qc_metrics(st_adata, qc_vars=["mt"], inplace=True)

plt.rcParams["figure.figsize"] = (pltFigSize, pltFigSize)

keys = ["in_tissue", "pct_counts_mt", "total_counts", "n_genes_by_counts"]
st_adata_in = st_adata[st_adata.obs["in_tissue"] == 1].copy()
sc.pl.spatial(st_adata_in, img_key="hires", color=keys)

keys = ["pct_counts_mt", "total_counts", "n_genes_by_counts"]
st_adata_out = st_adata[st_adata.obs["in_tissue"] != 1].copy()
sc.pp.filter_cells(st_adata_out, min_counts=minCounts)
sc.pp.filter_cells(st_adata_out, min_genes=minCells)
sc.pp.filter_genes(st_adata_out, min_cells=minGenes)
sc.pl.spatial(st_adata_out, img_key="hires", color=keys)


def histplotQC(se_data, bins, ax):
    ax.hist(se_data, density=True, bins=bins, color="navy", alpha=0.3)
    kde = scipy.stats.gaussian_kde(se_data)
    xx = np.linspace(min(se_data), max(se_data), 300)
    ax.set_xlabel(se_data.name)
    ax.set_ylabel("Density")
    ax.plot(xx, kde(xx), color="crimson")
    ax.set_xlim([0, ax.get_xlim()[1]])
    return


fig, axs = plt.subplots(1, 5, figsize=(pltFigSize * 5, pltFigSize))
histplotQC(st_adata.obs["total_counts"], bins=histplotQCbins, ax=axs[0])
histplotQC(
    st_adata.obs["total_counts"][st_adata.obs["total_counts"] < histplotQCmaxTotalCounts],
    bins=histplotQCbins,
    ax=axs[1],
)
histplotQC(st_adata.obs["n_genes_by_counts"], bins=histplotQCbins, ax=axs[2])
histplotQC(
    st_adata.obs["n_genes_by_counts"][st_adata.obs["n_genes_by_counts"] < histplotQCminGeneCounts],
    bins=histplotQCbins,
    ax=axs[3],
)
histplotQC(st_adata.obs["pct_counts_mt"], bins=histplotQCbins, ax=axs[4])
fig.tight_layout()
fig.savefig("st_histogrtam_all.png", facecolor="white")

fig, axs = plt.subplots(1, 5, figsize=(pltFigSize * 5, pltFigSize))
histplotQC(st_adata[st_adata.obs["in_tissue"] == 1].obs["total_counts"], bins=histplotQCbins, ax=axs[0])
histplotQC(
    st_adata[st_adata.obs["in_tissue"] == 1].obs["total_counts"][
        st_adata[st_adata.obs["in_tissue"] == 1].obs["total_counts"] < histplotQCmaxTotalCounts
    ],
    bins=histplotQCbins,
    ax=axs[1],
)
histplotQC(st_adata[st_adata.obs["in_tissue"] == 1].obs["n_genes_by_counts"], bins=histplotQCbins, ax=axs[2])
histplotQC(
    st_adata[st_adata.obs["in_tissue"] == 1].obs["n_genes_by_counts"][
        st_adata[st_adata.obs["in_tissue"] == 1].obs["n_genes_by_counts"] < histplotQCminGeneCounts
    ],
    bins=histplotQCbins,
    ax=axs[3],
)
histplotQC(st_adata[st_adata.obs["in_tissue"] == 1].obs["pct_counts_mt"], bins=histplotQCbins, ax=axs[4])
fig.tight_layout()
fig.savefig("st_histogrtam_in.png", facecolor="white")
plt.close(fig)

# Remove spots outside tissue
st_adata = st_adata[st_adata.obs["in_tissue"] == 1]
print("Filtered out spots outside tissue:", st_adata.shape)

# Save to open in R
#st_adata_R = st_adata.copy()
#print(st_adata_R)
#st_adata_R.X = csr_matrix(st_adata_R.X / st_adata_R.obs["norm_factors"].values[:, None])
#sc.pp.log1p(st_adata_R)
#np.savez_compressed(nameX, st_adata_R.X.T.todense())
#st_adata_R.var.to_csv(nameVar)
#st_adata_R.obs.to_csv(nameObs)


sc.pp.filter_cells(st_adata, min_counts=minCounts)
sc.pp.filter_cells(st_adata, min_genes=minGenes)
sc.pp.filter_genes(st_adata, min_cells=minCells)
print("Filtered spots and genes:", st_adata.shape)

# Effect of normalization by size factors
# TODO: Add correct normalization within scanpy
fig, ax = plt.subplots(figsize=(pltFigSize, pltFigSize))
display_cutoff = 10**5
se = pd.Series(np.array(st_adata.X.sum(axis=1)).T[0])
se = se[se < display_cutoff]
print("Number of spots displayed:", se.shape)
se.hist(bins=100, alpha=0.75, ax=ax)
ax.set_xlim(0, display_cutoff)
st_adata_c = st_adata[st_adata.obs["in_tissue"] == 1].copy()
###st_adata_c.X = csr_matrix(st_adata.X / st_adata.obs["norm_factors"].values[:, None])
se = pd.Series(np.array(st_adata_c.X.sum(axis=1)).T[0])
se = se[se < display_cutoff]
print("Number of spots displayed:", se.shape)
se.hist(bins=100, alpha=0.75, ax=ax)
ax.set_xlim(0, display_cutoff)
#fig.savefig(histWithWithoutNorm, facecolor="white", dpi=300)
plt.close(fig)

# Save raw filtered data
st_adata.write(nameDataPlain)

# Save normalized data
##st_adata.X = csr_matrix(st_adata.X / st_adata.obs["norm_factors"].values[:, None])
sc.pp.log1p(st_adata)
st_adata.write(nameDataNorm)
```