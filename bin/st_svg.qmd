---
title: "nf-core/spatialtranscriptomics"
subtitle: "Neighborhood enrichment analysis and Spatially variable genes"
format:
    nf-core-html: default
jupyter: python3
---

```{python}
#| tags: [parameters]
#| echo: false
input_sdata = "st_sdata_processed.zarr"  # Input: SpatialData file
n_top_spatial_degs = 14  # Number of SVG to plot in report
artifact_dir = "artifacts"  # Output directory
output_adata_svg = "st_adata_svg.h5ad"  # Output: AnnData file
output_sdata = "st_sdata_svg.zarr"  # Output: SpatialData file
output_svg = "st_svg.csv"  # Output: spatially variable genes
```

```{python}
import numpy as np
import os
import pandas as pd
import scanpy as sc
import squidpy as sq
import spatialdata
from anndata import AnnData
from matplotlib import pyplot as plt
```

```{python}
# Make sure we can use scanpy plots with the AnnData object exported from sdata.table
# This code is taken from the early version of https://github.com/scverse/spatialdata-io/pull/102/
# Once the PR will be merged in spatialdata-io, we should use spatialdata_io.to_legacy_anndata(sdata).
def to_legacy_anndata(sdata: spatialdata.SpatialData) -> AnnData:
    adata = sdata.table
    for dataset_id in adata.uns["spatial"]:
        adata.uns["spatial"][dataset_id]["images"] = {
            "hires": np.array(sdata.images[f"{dataset_id}_hires_image"]).transpose([1, 2, 0]),
            "lowres": np.array(sdata.images[f"{dataset_id}_lowres_image"]).transpose([1, 2, 0]),
        }
        adata.uns["spatial"][dataset_id]["scalefactors"] = {
            "tissue_hires_scalef": spatialdata.transformations.get_transformation(
                sdata.shapes[dataset_id], to_coordinate_system="downscaled_hires"
            ).scale[0],
            "tissue_lowres_scalef": spatialdata.transformations.get_transformation(
                sdata.shapes[dataset_id], to_coordinate_system="downscaled_lowres"
            ).scale[0],
            "spot_diameter_fullres": sdata.shapes[dataset_id]["radius"][0] * 2,
        }
    return adata
```

```{python}
# Read data
st_sdata = spatialdata.read_zarr("./" + input_sdata, ["images", "table", "shapes"])

st_adata = to_legacy_anndata(st_sdata)
print("Content of the AnnData object:")
print(st_adata)

# Fix for scanpy issue https://github.com/scverse/scanpy/issues/2181
st_adata.uns['log1p']['base'] = None

# Suppress scanpy-specific warnings
sc.settings.verbosity = 0
```

# Differential gene expression

Before we look for spatially variable genes we first find differentially
expressed genes across the different clusters found in the data. We can
visualize the top DEGs in a heatmap:

```{python}
#| warning: false
sc.tl.rank_genes_groups(st_adata, 'clusters', method='t-test')
sc.pl.rank_genes_groups_heatmap(st_adata, n_genes=5, groupby="clusters")
```

A different but similar visualization of the DEGs is the dot plot, where we can
also include the gene names:

```{python}
#| warning: false
sc.pl.rank_genes_groups_dotplot(st_adata, n_genes=5, groupby="clusters")
```

::: {.callout-note}
Please note that you may need to scroll sidewise in these figures, as their
height and width depends on the number of clusters as well as the number and
intersection of the DEGs that are being plotted.
:::

# Neighborhood enrichment analysis

We can perform a neighborhood enrichment analysis to find out which
genes are enriched in the neighborhood of each cluster:

```{python}
sq.gr.spatial_neighbors(st_adata, coord_type="generic")
sq.gr.nhood_enrichment(st_adata, cluster_key="clusters")
sq.pl.nhood_enrichment(st_adata, cluster_key="clusters", method="ward", vmin=-100, vmax=100)
```

We visualize the interaction matrix between the different clusters:

```{python}
sq.gr.interaction_matrix(st_adata, cluster_key="clusters")
sq.pl.interaction_matrix(st_adata, cluster_key="clusters", method="ward", vmax=20000)
```

# Spatially variable genes with spatial autocorrelation statistics

Spatial transcriptomics data can give insight into how genes are expressed in
different areas in a tissue, allowing identification of spatial gene expression
patterns. Here we use [Moran's I](https://en.wikipedia.org/wiki/Moran%27s_I) autocorrelation score to identify such patterns.

```{python}
st_adata.var_names_make_unique()
sq.gr.spatial_autocorr(st_adata, mode="moran")
st_adata.uns["moranI"].head(n_top_spatial_degs)
#[TODO] add gearyC as optional mode
```


```{python}
#| echo: false
st_adata.write(output_adata_svg)
del st_sdata.table
st_sdata.table = st_adata
st_sdata.write("./" + output_sdata)
```

```{python}
st_adata.uns["moranI"].to_csv(os.path.join(artifact_dir, output_svg))
```
