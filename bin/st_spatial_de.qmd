---
title: "nf-core/spatialtranscriptomics"
subtitle: "Differential gene expression"
format:
  nf-core-html: default
jupyter: python3
---

```{python}
#| tags: [parameters]
#| echo: false
fileNameST = ""
numberOfColumns = 5
saveDEFileName = ""
saveSpatialDEFileName = ""
plotTopHVG = 15
```

```{python}
import scanpy as sc
import pandas as pd
import SpatialDE
from matplotlib import pyplot as plt
```

```{python}
st_adata = sc.read(fileNameST)
st_adata
```

# Differential gene expression

We first find differentially expressed genes across the different clusters found
in the dataset.

```{python}
#| warning: false
plt.rcParams["figure.figsize"] = (5, 5)
st_adata.uns['log1p']['base'] = None
sc.tl.rank_genes_groups(st_adata, 'clusters', method='t-test')
sc.pl.rank_genes_groups(st_adata, n_genes=25, sharey=False, gene_symbols="gene_symbol")
```

# Spatially variable genes

Spatial transcriptomics allows researchers to investigate how gene expression
trends varies in space, thus identifying spatial patterns of gene expression.
For this purpose, we use SpatialDE
[Svensson18](https://www.nature.com/articles/nmeth.4636)
([code](https://github.com/Teichlab/SpatialDE)), a Gaussian process-based
statistical framework that aims to identify spatially variable genes.

First, we convert normalized counts and coordinates to pandas dataframe, needed
for inputs to spatialDE.

```{python}
results = SpatialDE.run(st_adata.obsm["spatial"], st_adata.to_df())
```

We concatenate the results with the DataFrame of annotations of variables:
`st_adata.var`. We can then inspect significant genes that varies in space and
visualize them with `sc.pl.spatial` function.


```{python}
results.set_index("g", inplace=True)
# workaround for https://github.com/Teichlab/SpatialDE/issues/36
results = results.loc[~results.index.duplicated(keep="first")]

st_adata.var = pd.concat([st_adata.var, results.loc[st_adata.var.index.values, :]], axis=1)

results_tab = st_adata.var.sort_values("qval", ascending=True)
results_tab.to_csv(saveSpatialDEFileName)
results_tab.head(plotTopHVG)
```

```{python}
symbols = results_tab.iloc[: plotTopHVG]["gene_symbol"]
sc.pl.spatial(st_adata, img_key="hires", color=symbols.index, alpha=0.7,
              ncols=numberOfColumns, title=symbols)
```
