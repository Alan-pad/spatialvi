---
title: "nf-core/spatialtranscriptomics"
subtitle: "Pre-processing and quality controls"
format:
  nf-core-html: default
jupyter: python3
---

# Introduction

Spatial Transcriptomics data analysis involves several steps, including quality
controls (QC) and pre-processing, to ensure the reliability of downstream
analyses. This is an essential step in spatial transcriptomics to
identify and filter out spots and genes that may introduce noise and/or bias
into the analysis.

This report outlines the QC and pre-processing steps for Visium Spatial
Transcriptomics data using the [AnnData format](https://anndata.readthedocs.io/en/latest/tutorials/notebooks/getting-started.html)
and the [`scanpy` Python package](https://scanpy.readthedocs.io/en/stable/).
The anndata format is utilized to organize and store the Spatial Transcriptomics
data. It includes information about counts, features, observations, and
additional metadata. The anndata format ensures compatibility with various
analysis tools and facilitates seamless integration into existing workflows.

```{python}
#| tags: [parameters]
#| echo: false
input_adata_raw = "st_adata_raw.h5ad"  # Name of the input anndata file
min_counts = 500  # Min counts per spot
min_genes = 250  # Min genes per spot
min_spots = 1  # Min spots per gene
mito_threshold = 20  # Mitochondrial content threshold (%)
output_adata_filtered = "st_adata_filtered.h5ad"  # Name of the output anndata file
```

```{python}
import scanpy as sc
import scipy
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from IPython.display import display, Markdown
plt.rcParams["figure.figsize"] = (6, 6)
```

```{python}
# Read the data
st_adata = sc.read("./" + input_adata_raw)

# Convert X matrix from csr to csc dense matrix for output compatibility:
st_adata.X = scipy.sparse.csc_matrix(st_adata.X)

# Store the raw data so that it can be used for analyses from scratch if desired
st_adata.layers['raw'] = st_adata.X.copy()

# Print the anndata object for inspection
print("Content of the AnnData object:")
print(st_adata)
```

# Quality controls

There are several different quality metrics that are normally computed for
spatial data. Common metrics include the number of genes with a least 1 count
(`n_genes_by_counts`), counts per spot (`total_counts`) as well as the
percentage of counts from mitochondrial, ribosomal and haemoglobin genes
(`pct_counts_[mt/ribo/hb]`).

```{python}
# Calculate mitochondrial, ribosomal and haemoglobin percentages
st_adata.var['mt'] = st_adata.var_names.str.startswith('MT-')
st_adata.var['ribo'] = st_adata.var_names.str.contains(("^RP[LS]"))
st_adata.var['hb'] = st_adata.var_names.str.contains(("^HB[AB]"))
sc.pp.calculate_qc_metrics(st_adata, qc_vars=["mt", "ribo", "hb"],
                           inplace=True, log1p=False)

# Save a copy of data as a restore-point if filtering results in 0 spots left
st_adata_before_filtering = st_adata.copy()
```

## Violin plots

The following violin plots show the distribution of the number of genes per
counts and counts per spot, as well as the percentage of counts from
mitochondrial, ribosomal and haemoglobin genes:

```{python}
#| layout-nrow: 2
sc.pl.violin(st_adata, ['n_genes_by_counts', 'total_counts'],
             multi_panel=True, jitter=0.4, rotation= 45)
sc.pl.violin(st_adata, ['pct_counts_mt', 'pct_counts_ribo', 'pct_counts_hb'],
             multi_panel=True, jitter=0.4, rotation= 45)
```

## Spatial distributions

The same quality metrics can also be plotted on top of the tissue so that
spatial patterns may be discerned:

```{python}
#| layout-nrow: 2
sc.pl.spatial(st_adata, color = ["total_counts", "n_genes_by_counts"], size=1.25)
sc.pl.spatial(st_adata, color = ["pct_counts_mt", "pct_counts_ribo", "pct_counts_hb"], size=1.25)
```

## Scatter plots

It is also useful to some of these quality metrics against each other in scatter
plots, such as mitochondrial versus ribosomal content and the total counts
versus the number of genes:

```{python}
#| layout-ncol: 2
sc.pl.scatter(st_adata, x='pct_counts_ribo', y='pct_counts_mt')
sc.pl.scatter(st_adata, x='total_counts', y='n_genes_by_counts')
```

## Top expressed genes

It can also be informative to see which genes are the most expressed in the
dataset; the following figure shows the top 20 most expressed genes.

```{python}
sc.pl.highest_expr_genes(st_adata, n_top=20)
```

# Filtering

## Non-tissue spots

The following plot indicates which spots are outside of the tissue. These spots
are uninformative and are thus removed.

```{python}
# Create a string observation "obs/in_tissue_str" with "In tissue" and "Outside tissue":
st_adata.obs["in_tissue_str"] = ["In tissue" if x == 1 else "Outside tissue" for x in st_adata.obs["in_tissue"]]

# Plot spots inside tissue
sc.pl.spatial(st_adata, color=["in_tissue_str"], title="Spots in tissue", size=1.25)
del st_adata.obs["in_tissue_str"]

# Remove spots outside tissue and print results
n_spots = st_adata.shape[0]
st_adata = st_adata[st_adata.obs["in_tissue"] == 1]
n_spots_in_tissue = st_adata.shape[0]
Markdown(f"""A total of `{n_spots_in_tissue}` spots are situated inside the
tissue, out of `{n_spots}` spots in total.""")
```

## Counts, genes and spots

We filter spots based on minimum counts and genes, but also filter genes based
on minimum spots; exactly what filtering criteria is reasonable is up to you and
your knowledge of the specific tissue at hand.

```{python}
#| warning: false
# Filter spots based on counts
n_spots = st_adata.shape[0]
n_genes = st_adata.shape[1]
sc.pp.filter_cells(st_adata, min_counts=min_counts)
n_spots_filtered_min_counts = st_adata.shape[0]

# Filter spots based on genes
sc.pp.filter_cells(st_adata, min_genes=min_genes)
n_spots_filtered_min_genes = st_adata.shape[0]

# Filter genes based on spots
sc.pp.filter_genes(st_adata, min_cells=min_spots)
n_genes_filtered_min_spots = st_adata.shape[1]

# Print results
Markdown(f"""
- Removed `{n_spots - n_spots_filtered_min_counts}` spots with less than `{min_counts}` total counts.
- Removed `{n_spots - n_spots_filtered_min_genes}` spots with less than `{min_genes}` genes expressed.
- Removed `{n_genes - n_genes_filtered_min_spots}` genes expressed in less than `{min_spots}` spots.
- A total of `{n_spots_filtered_min_genes}` spots out of `{n_spots}` remain after filtering.
- A total of `{n_genes_filtered_min_spots}` genes out of `{n_genes}` remain after filtering.
""")
```

## Mito, ribo and Hb

We can also filter for mitochondrial, ribosomal and haemoglobin content of the
cells:

```{python}
# Filter spots
st_adata = st_adata[st_adata.obs["pct_counts_mt"] < mito_threshold]
n_spots_filtered_mito = st_adata.shape[0]

# Print results
Markdown(f"""
- Removed `{n_spots - n_spots_filtered_mito}` spots with less than `{mito_threshold}%` mitochondrial content.
""")
```

```{python}
#| echo: false
# Restore non-filtered data if filtering results in 0 spots left
if (st_adata.shape[0] == 0 or st_adata.shape[1] == 0):
    st_adata = st_adata_before_filtering
    display(
        Markdown("""
::: {.callout-important .content-visible when-format="html"}
## Issue: no spots remain after filtering

An anomaly has been detected in the data: following the filtering process,
all spots have been excluded. It is imperative to assess the data quality
and carefully review the Analysis Options outlined in `docs/usage.md`.

To ensure the smooth progression of downstream analysis, the exported
AnnData will, for the time being, remain unfiltered. This precautionary
measure is implemented to facilitate continued analysis while
investigating and resolving the cause of the unexpected removal of all
spots during filtering.
:::"""
        )
    )
```

## Violin plots

Following the filtering we can look at the same violin plots as above to see the
new distributions:

```{python}
#| layout-nrow: 2
sc.pl.violin(st_adata, ['n_genes_by_counts', 'total_counts'],
             multi_panel=True, jitter=0.4, rotation= 45)
sc.pl.violin(st_adata, ['pct_counts_mt', 'pct_counts_ribo', 'pct_counts_hb'],
             multi_panel=True, jitter=0.4, rotation= 45)
```

```{python}
#| echo: false
# Write filtered data to disc
st_adata.write(output_adata_filtered)
```
